setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
## READ IN DATA ####
source("rcourse_lesson6_cleaning.R")
## LOAD PACKAGES ####
library(ggplot2)
library(RColorBrewer)
## ORGANIZE DATA ####
# Accuracy data
data_accuracy_figs = data_accuracy_clean %>%
group_by(subject_id, congruency, half) %>%
summarise(perc_correct = mean(accuracy) * 100) %>%
ungroup() %>%
mutate(congruency = factor(congruency, levels = c("con", "incon"),
labels = c("congruent", "incongruent")))
# RT data
data_rt_figs = data_rt_clean %>%
mutate(congruency = factor(congruency, levels = c("con", "incon"),
labels = c("congruent", "incongruent")))
## SET COLORS FOR FIGURES ####
cols = brewer.pal(5, "PuOr")
col_con = cols[1]
col_incon = cols[5]
## MAKE FIGURES ####
# Accuracy figure
accuracy.plot = ggplot(data_accuracy_figs, aes(x = half, y = perc_correct,
fill = congruency)) +
geom_boxplot() +
ylim(0, 100) +
geom_hline(yintercept = 50) +
scale_fill_manual(values = c(col_con, col_incon))
pdf("../figures/accuracy.pdf")
accuracy.plot
dev.off()
# RT histogram
rt_histogram.plot = ggplot(data_rt_figs, aes(x = rt, fill = congruency)) +
geom_histogram(bins = 30) +
facet_grid(half ~ congruency) +
scale_fill_manual(values = c(col_con, col_incon))
pdf("../figures/rt_histogram.pdf")
rt_histogram.plot
dev.off()
# RT log 10 histogram
rt_log10_histogram.plot = ggplot(data_rt_figs, aes(x = rt_log10, fill = congruency)) +
geom_histogram(bins = 30) +
facet_grid(half ~ congruency) +
scale_fill_manual(values = c(col_con, col_incon))
pdf("../figures/rt_log10_histogram.pdf")
rt_log10_histogram.plot
dev.off()
# RT log 10 boxplot
rt_log10_boxplot.plot = ggplot(data_rt_figs, aes(x = half, y = rt_log10, fill = congruency)) +
geom_boxplot() +
scale_fill_manual(values = c(col_con, col_incon))
pdf("../figures/rt_log10.pdf")
rt_log10_boxplot.plot
dev.off()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
## LOAD PACKAGES ####
library(dplyr)
library(purrr)
## READ IN DATA
# Read in full results
data_results = list.files(path = "../data/results", full.names = T) %>%
map(read.table, header = T, sep="\t") %>%
reduce(rbind)
# Read in extra data about specific subjects
data_subjects = read.table("../data/rcourse_lesson6_data_subjects.txt", header=T, sep="\t")
# Read in extra data about specific items
data_items = read.table("../data/rcourse_lesson6_data_items.txt", header=T, sep="\t")
## CLEAN DATA ####
# Fix and update columns for results data, combine with other data
data_clean = data_results %>%
rename(trial_number = SimpleRTBLock.TrialNr.) %>%
rename(congruency = Congruency) %>%
rename(correct_response = StroopItem.CRESP.) %>%
rename(given_response = StroopItem.RESP.) %>%
rename(accuracy = StroopItem.ACC.) %>%
rename(rt = StroopItem.RT.) %>%
select(subject_id, block, item, trial_number, congruency,
correct_response, given_response, accuracy, rt) %>%
inner_join(data_subjects) %>%
inner_join(data_items) %>%
mutate(half = ifelse(block == "one" | block == "two", "first", "second"))
# Get RT outlier information
data_rt_sum = data_clean %>%
group_by(subject_id, congruency, half) %>%
summarise(rt_mean = mean(rt),
rt_sd = sd(rt)) %>%
ungroup() %>%
mutate(rt_high = rt_mean + (2 * rt_sd)) %>%
mutate(rt_low = rt_mean - (2 * rt_sd))
# Remove data points with slow RTs for accuracy data
data_accuracy_clean = data_clean %>%
inner_join(data_rt_sum) %>%
filter(rt < rt_high) %>%
filter(rt > rt_low)
data_rt_clean = data_accuracy_clean %>%
filter(accuracy == "1") %>%
mutate(rt_log10 = log10(rt))
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
## READ IN DATA ####
source("../scripts/rcourse_lesson6_cleaning.R")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
## READ IN DATA ####
source("../scripts/rcourse_lesson6_cleaning.R")
## LOAD PACKAGES ####
library(lme4)
# Accuracy data
data_accuracy_stats = data_accuracy_clean
# Check within or between variables
xtabs(~subject_id+congruency+half, data_accuracy_stats)
xtabs(~item+congruency+half, data_accuracy_stats)
xtabs(~item+half, data_accuracy_stats)
# RT data
data_rt_stats = data_rt_clean
## BUILD MODEL FOR ACCURACY ANALYSIS ####
accuracy.glmer = glmer(accuracy ~ congruency * half +
(1|subject_id) +
(0+half|subject_id) +
(1|item), family = "binomial",
data = data_accuracy_stats)
# Summarise model and save
accuracy.glmer_sum = summary(accuracy.glmer)
accuracy.glmer_sum
# Get coefficients and save
accuracy.glmer_coef = coef(accuracy.glmer)
accuracy.glmer_coef
## BUILD MODEL FOR REACTION TIME ANALYSIS ####
rt_log10.lmer = lmer(rt_log10 ~ congruency * half +
(1+congruency*half|subject_id) +
(1+half|item),
data = data_rt_stats)
# Summarise model and save
rt_log10.lmer_sum = summary(rt_log10.lmer)
rt_log10.lmer_sum
# Get coefficients and save
rt_log10.lmer_coef = coef(rt_log10.lmer)
rt_log10.lmer_coef
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
## READ IN DATA ####
source("rcourse_lesson6_cleaning.R")
## LOAD PACKAGES ####
library(lme4)
## ORGANIZE DATA ####
# Accuracy data
data_accuracy_stats = data_accuracy_clean %>%
mutate(congruency_contrast = ifelse(congruency == "con", -0.5, 0.5)) %>%
mutate(half_contrast = ifelse(half == "first", -0.5, 0.5))
xtabs(~congruency+congruency_contrast, data_accuracy_stats)
xtabs(~half+half_contrast, data_accuracy_stats)
# RT data
data_rt_stats = data_rt_clean %>%
mutate(congruency_contrast = ifelse(congruency == "con", -0.5, 0.5)) %>%
mutate(half_contrast = ifelse(half == "first", -0.5, 0.5))
xtabs(~congruency+congruency_contrast, data_rt_stats)
xtabs(~half+half_contrast, data_rt_stats)
# Full model
accuracy.glmer = glmer(accuracy ~ congruency_contrast * half_contrast +
(1+congruency_contrast*half_contrast|subject_id) +
(1+half_contrast|item), family = "binomial",
data = data_accuracy_stats)
accuracy.glmer = glmer(accuracy ~ congruency_contrast * half_contrast +
(1|subject_id) +
(0+half_contrast|subject_id) +
(1|item), family = "binomial",
data = data_accuracy_stats)
# Summarise model and save
accuracy.glmer_sum = summary(accuracy.glmer)
accuracy.glmer_sum
# Test for effect of congruency
accuracy_congruency.glmer = glmer(accuracy ~ congruency_contrast * half_contrast -
congruency_contrast +
(1|subject_id) +
(0+half_contrast|subject_id) +
(1|item), family = "binomial",
data = data_accuracy_stats)
# Model Comparison
accuracy_congruency.anova = anova(accuracy.glmer, accuracy_congruency.glmer)
accuracy_congruency.anova
# Test for effect of experiment half
accuracy_half.glmer = glmer(accuracy ~ congruency_contrast * half_contrast -
half_contrast +
(1|subject_id) +
(0+half_contrast|subject_id) +
(1|item), family = "binomial",
data = data_accuracy_stats)
accuracy_half.anova = anova(accuracy.glmer, accuracy_half.glmer)
accuracy_half.anova
# Test for interaction of congruency x experiment half
accuracy_congruencyxhalf.glmer = glmer(accuracy ~ congruency_contrast * half_contrast -
congruency_contrast:half_contrast +
(1|subject_id) +
(0+half_contrast|subject_id) +
(1|item), family = "binomial",
data = data_accuracy_stats)
accuracy_congruencyxhalf.anova = anova(accuracy.glmer, accuracy_congruencyxhalf.glmer)
accuracy_congruencyxhalf.anova
## BUILD MODELS FOR REACTION TIME ANALYSIS ####
# Full model
rt_log10.lmer = lmer(rt_log10 ~ congruency_contrast * half_contrast +
(1+congruency_contrast*half_contrast|subject_id) +
(1+half_contrast|item), REML = F,
data = data_rt_stats)
rt_log10.lmer = lmer(rt_log10 ~ congruency_contrast * half_contrast +
(1+congruency_contrast*half_contrast|subject_id) +
(1|item) +
(0+half_contrast|item), REML = F,
data = data_rt_stats)
rt_log10.lmer_sum = summary(rt_log10.lmer)
rt_log10.lmer_sum
# Test for effect of congruency
rt_log10_congruency.lmer = lmer(rt_log10 ~ congruency_contrast * half_contrast -
congruency_contrast +
(1+congruency_contrast*half_contrast|subject_id) +
(1|item) +
(0+half_contrast|item), REML = F,
data = data_rt_stats)
rt_log10_congruency.anova = anova(rt_log10.lmer, rt_log10_congruency.lmer)
rt_log10_congruency.anova
# Test for effect of experiment half
rt_log10_half.lmer = lmer(rt_log10 ~ congruency_contrast * half_contrast -
half_contrast +
(1+congruency_contrast*half_contrast|subject_id) +
(1|item) +
(0+half_contrast|item), REML = F,
data = data_rt_stats)
rt_log10_half.anova = anova(rt_log10.lmer, rt_log10_half.lmer)
rt_log10_half.anova
# Test for interaction of congruency and experiment half
rt_log10_congruencyxhalf.lmer = lmer(rt_log10 ~ congruency_contrast * half_contrast -
congruency_contrast:half_contrast +
(1+congruency_contrast*half_contrast|subject_id) +
(1|item) +
(0+half_contrast|item), REML = F,
data = data_rt_stats)
rt_log10_congruencyxhalf.anova = anova(rt_log10.lmer, rt_log10_congruencyxhalf.lmer)
rt_log10_congruencyxhalf.anova
